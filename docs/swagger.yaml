definitions:
  models.Brand:
    properties:
      aboutbrand:
        example: At Mercedes_Benz, our employes and communities are ate the heart
          of everything we do
        type: string
      brand_id:
        type: string
      country:
        example: USA, KOREA, GERMANY
        type: string
      created_at:
        type: string
      manufacturer:
        example: Berlin
        type: string
      name:
        example: Sherlock
        maxLength: 50
        minLength: 2
        type: string
      updated_at:
        type: string
    required:
    - aboutbrand
    - country
    - manufacturer
    - name
    type: object
  models.Car:
    properties:
      brand_id:
        example: "1"
        type: string
      car_id:
        type: string
      car_type:
        example: electro_car
        type: string
      color:
        example: Dark-Black
        type: string
      created_at:
        type: string
      mileage:
        example: 360-km
        type: string
      model:
        example: Tesla Company
        type: string
      price:
        example: 70$
        type: string
      updated_at:
        type: string
      year:
        example: "2020"
        type: string
    required:
    - model
    type: object
  models.CreateBrandModel:
    properties:
      aboutbrand:
        example: At Mercedes_Benz, our employes and communities are ate the heart
          of everything we do
        type: string
      country:
        example: USA, KOREA, GERMANY
        type: string
      manufacturer:
        example: Berlin
        type: string
      name:
        example: Sherlock
        maxLength: 50
        minLength: 2
        type: string
    required:
    - aboutbrand
    - country
    - manufacturer
    - name
    type: object
  models.CreateCarModel:
    properties:
      brand_id:
        example: "1"
        type: string
      car_type:
        example: electro_car
        type: string
      color:
        example: Dark-Black
        type: string
      mileage:
        example: 360-km
        type: string
      model:
        example: Tesla Company
        type: string
      price:
        example: 70$
        type: string
      year:
        example: "2020"
        type: string
    required:
    - model
    type: object
  models.CreateRentalModel:
    properties:
      car_id:
        type: string
      customer_id:
        type: string
      end_date:
        type: string
      payment:
        type: string
      rental_id:
        type: string
      start_date:
        type: string
    required:
    - car_id
    - customer_id
    - end_date
    - payment
    - rental_id
    - start_date
    type: object
  models.JSONErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.JSONResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.LoginModel:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.PackedCarModel:
    properties:
      brand_id:
        $ref: '#/definitions/models.Brand'
      car_id:
        type: string
      car_type:
        example: electro_car
        type: string
      color:
        example: White
        type: string
      created_at:
        type: string
      fullname:
        example: Tesla
        type: string
      mileage:
        example: 540-km
        type: string
      price:
        example: 80$
        type: string
      updated_at:
        type: string
      year:
        example: "2022"
        type: string
    required:
    - fullname
    type: object
  models.PackedRentalModel:
    properties:
      car:
        $ref: '#/definitions/models.Car'
      created_at:
        type: string
      end_date:
        type: string
      payment:
        type: string
      rental_id:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - end_date
    - payment
    - rental_id
    - start_date
    type: object
  models.Rental:
    properties:
      car_id:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      end_date:
        type: string
      payment:
        type: string
      rental_id:
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    required:
    - car_id
    - customer_id
    - end_date
    - payment
    - rental_id
    - start_date
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateBrandModel:
    properties:
      aboutbrand:
        example: At Mercedes_Benz, our employes and communities are ate the heart
          of everything we do
        type: string
      brand_id:
        type: string
      country:
        example: USA, KOREA, GERMANY
        type: string
      manufacturer:
        example: Berlin
        type: string
      name:
        example: Sherlock
        maxLength: 50
        minLength: 2
        type: string
    required:
    - aboutbrand
    - country
    - manufacturer
    - name
    type: object
  models.UpdateCarModel:
    properties:
      brand_id:
        example: "1"
        type: string
      car_id:
        type: string
      car_type:
        example: electro_car
        type: string
      color:
        example: Dark-Black
        type: string
      mileage:
        example: 360-km
        type: string
      model:
        example: Tesla Company
        type: string
      price:
        example: 70$
        type: string
      year:
        example: "2020"
        type: string
    required:
    - model
    type: object
  models.UpdateRentalModel:
    properties:
      car_id:
        type: string
      customer_id:
        type: string
      end_date:
        type: string
      payment:
        type: string
      rental_id:
        type: string
      start_date:
        type: string
    required:
    - car_id
    - customer_id
    - end_date
    - payment
    - rental_id
    - start_date
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      fname:
        type: string
      id:
        type: string
      lname:
        type: string
      password:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      user_type:
        type: string
      username:
        type: string
    required:
    - address
    - fname
    - id
    - lname
    - password
    - phone
    - user_type
    - username
    type: object
info:
  contact: {}
paths:
  /v1/brand:
    get:
      consumes:
      - application/json
      description: get brands
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Brand'
                  type: array
              type: object
      summary: List brands
      tags:
      - brands
    post:
      consumes:
      - application/json
      description: Create a new brand
      parameters:
      - description: brand body
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/models.CreateBrandModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Create brand
      tags:
      - brands
    put:
      consumes:
      - application/json
      description: Update a new brand
      parameters:
      - description: updating brand
        in: body
        name: brand
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBrandModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update brand
      tags:
      - brands
  /v1/brand/{id}:
    delete:
      consumes:
      - application/json
      description: delete brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete brand
      tags:
      - brands
    get:
      consumes:
      - application/json
      description: get a new brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: get brand by id
      tags:
      - brands
  /v1/car:
    get:
      consumes:
      - application/json
      description: get cars
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Car'
                  type: array
              type: object
      summary: List cars
      tags:
      - cars
    post:
      consumes:
      - application/json
      description: Create a new car
      parameters:
      - description: car body
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.CreateCarModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PackedCarModel'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Create car
      tags:
      - cars
    put:
      consumes:
      - application/json
      description: Update a new car
      parameters:
      - description: updating car
        in: body
        name: car
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCarModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Car'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update car
      tags:
      - cars
  /v1/car/{id}:
    delete:
      consumes:
      - application/json
      description: delete car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Car'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete car
      tags:
      - cars
    get:
      consumes:
      - application/json
      description: get a new car
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PackedCarModel'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: get car by id
      tags:
      - cars
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login body
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Login
      tags:
      - authorization (login)
  /v1/rental:
    get:
      consumes:
      - application/json
      description: get rentals
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Rental'
                  type: array
              type: object
      summary: List rentals
      tags:
      - rentals
    post:
      consumes:
      - application/json
      description: Create a new rental
      parameters:
      - description: rental body
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/models.CreateRentalModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Rental'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Create rental
      tags:
      - rentals
    put:
      consumes:
      - application/json
      description: Update a new rental
      parameters:
      - description: updating rental
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRentalModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Rental'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update rental
      tags:
      - rentals
  /v1/rental/{id}:
    delete:
      consumes:
      - application/json
      description: delete rental by id
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Rental'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: delete rental by id
      tags:
      - rentals
    get:
      consumes:
      - application/json
      description: get a rental by id
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.PackedRentalModel'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: get rental by id
      tags:
      - rentals
swagger: "2.0"
