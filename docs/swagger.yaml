definitions:
  models.Brand:
    properties:
      author_id:
        type: string
      body:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - author_id
    - body
    - title
    type: object
  models.Car:
    properties:
      created_at:
        type: string
      fullname:
        description: |-
          Lastname  string `json:"lastname" binding:"required" minLenth:"3" maxLength:"16" example:"John"`
          Firstname string `json:"firstname" binding:"required" minLenth:"3" maxLength:"16" example:"Doe"`
        example: Sherlock Holmes
        maxLength: 255
        type: string
      id:
        type: string
      middlename:
        example: Sherlock
        maxLength: 15
        type: string
      updated_at:
        type: string
    required:
    - fullname
    type: object
  models.CreateModelBrand:
    properties:
      author_id:
        type: string
      body:
        type: string
      title:
        type: string
    required:
    - author_id
    - body
    - title
    type: object
  models.CreateModelAuthor:
    properties:
      fullname:
        description: |-
          Lastname  string `json:"lastname" binding:"required" minLenth:"3" maxLength:"16" example:"John"`
          Firstname string `json:"firstname" binding:"required" minLenth:"3" maxLength:"16" example:"Doe"`
        example: Sherlock Holmes
        maxLength: 255
        type: string
      middlename:
        example: Sherlock
        maxLength: 15
        type: string
    required:
    - fullname
    type: object
  models.GetByIDBrandModel:
    properties:
      author_id:
        $ref: '#/definitions/models.Car'
      body:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    required:
    - author_id
    - body
    - title
    type: object
  models.JSONErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.JSONResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.LoginModel:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.UpdateBrandModel:
    properties:
      body:
        type: string
      id:
        type: string
      title:
        type: string
    required:
    - body
    - id
    - title
    type: object
  models.UpdateAuthorResponse:
    properties:
      fullname:
        description: |-
          Lastname  string `json:"lastname" binding:"required" minLenth:"3" maxLength:"16" example:"John"`
          Firstname string `json:"firstname" binding:"required" minLenth:"3" maxLength:"16" example:"Doe"`
        example: Sherlock Holmes
        maxLength: 255
        type: string
      id:
        type: string
      middlename:
        example: Sherlock
        maxLength: 15
        type: string
    required:
    - fullname
    type: object
info:
  contact: {}
paths:
  /v1/article:
    get:
      consumes:
      - application/json
      description: get articles
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: smth
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Brand'
                  type: array
              type: object
      summary: List articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: article body
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.CreateModelBrand'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Create article
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update a new article
      parameters:
      - description: updating article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBrandModel'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update article
      tags:
      - articles
  /v1/article/{id}:
    delete:
      consumes:
      - application/json
      description: delete article
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Brand'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete article
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: get a new article
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.GetByIDBrandModel'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: get article by id
      tags:
      - articles
  /v1/author:
    get:
      consumes:
      - application/json
      description: get authors
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: smth
        in: query
        name: search
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Car'
                  type: array
              type: object
      summary: List authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: Create a new author
      parameters:
      - description: author body
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.CreateModelAuthor'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Create author
      tags:
      - authors
    put:
      consumes:
      - application/json
      description: Update a new author
      parameters:
      - description: updating author
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAuthorResponse'
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Car'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Update author
      tags:
      - authors
  /v1/author/{id}:
    delete:
      consumes:
      - application/json
      description: delete author
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Car'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Delete author
      tags:
      - authors
    get:
      consumes:
      - application/json
      description: get a new author
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Car'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: get author by id
      tags:
      - authors
  /v1/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login body
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.JSONErrorResponse'
      summary: Login
      tags:
      - authorization (login)
  /v1/my_articles:
    get:
      consumes:
      - application/json
      description: get articles
      parameters:
      - description: "0"
        in: query
        name: offset
        type: integer
      - description: "10"
        in: query
        name: limit
        type: integer
      - description: Authorization
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.JSONResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Brand'
                  type: array
              type: object
      summary: List articles
      tags:
      - articles
swagger: "2.0"
